plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.fix.performance'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

dependencies {
    // Chronicle Queue dependencies
    implementation 'net.openhft:chronicle-queue:5.27ea8'
    implementation 'net.openhft:chronicle-bytes:2.27ea8'
    implementation 'net.openhft:chronicle-wire:2.27ea8'
    implementation 'net.openhft:affinity:3.23.2'
    
    // QuickFIX/J
    implementation 'org.quickfixj:quickfixj-core:2.3.1'
    
    // HdrHistogram for metrics
    implementation 'org.hdrhistogram:HdrHistogram:2.1.12'
    
    // Logging
    implementation 'org.apache.logging.log4j:log4j-core:2.21.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.21.1'
    
    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
}

application {
    mainClass = 'com.fix.performance.Main'
}

tasks.named('test') {
    useJUnitPlatform()
}

// Configure JVM options for performance testing
run {
    jvmArgs = [
        '-XX:+UseG1GC',
        '-XX:MaxGCPauseMillis=200',
        '-XX:+UnlockExperimentalVMOptions',
        '-XX:+UseJVMCICompiler',
        '-Xmx4g'
    ]
}

// Shadow plugin configuration for fat JAR
shadowJar {
    archiveBaseName = 'fix-performance-test'
    archiveClassifier = ''
    archiveVersion = ''
    
    manifest {
        attributes(
            'Main-Class': 'com.fix.performance.Main',
            'Implementation-Title': 'FIX Performance Test',
            'Implementation-Version': version
        )
    }
}

// Task to run the generator
task runGenerate(type: JavaExec) {
    group = 'application'
    description = 'Run FIX message generator'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.fix.performance.Generator'
    args = project.hasProperty('args') ? project.property('args').split() : []
}

// Task to run flyweight consumer
task runFlyweight(type: JavaExec) {
    group = 'application'
    description = 'Run flyweight consumer'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.fix.performance.FlyweightConsumer'
    args = project.hasProperty('args') ? project.property('args').split() : []
}

// Task to run QuickFIX/J consumer
task runQuickFIXJ(type: JavaExec) {
    group = 'application'
    description = 'Run QuickFIX/J consumer'
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.fix.performance.QuickFIXJConsumer'
    args = project.hasProperty('args') ? project.property('args').split() : []
}
